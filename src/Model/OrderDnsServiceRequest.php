<?php
/**
 * OrderDnsServiceRequest
 *
 * PHP version 8.1
 *
 * @package  SimplyCom
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Simply.com API
 *
 * Documentation for this API can be found on https://www.simply.com/docs/api/
 *
 * The version of the OpenAPI document: 2.2.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SimplyCom\SimplyCom\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use SimplyCom\ObjectSerializer;

/**
 * OrderDnsServiceRequest Class Doc Comment
 *
 * @package  SimplyCom
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class OrderDnsServiceRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'orderDnsService_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'domain' => 'string',
        'domainaction' => 'string',
        'coupon' => 'string',
        'authid' => 'string',
        'autorenew' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'domain' => null,
        'domainaction' => null,
        'coupon' => null,
        'authid' => null,
        'autorenew' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'domain' => false,
        'domainaction' => false,
        'coupon' => false,
        'authid' => false,
        'autorenew' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'domain' => 'domain',
        'domainaction' => 'domainaction',
        'coupon' => 'coupon',
        'authid' => 'authid',
        'autorenew' => 'autorenew'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'domain' => 'setDomain',
        'domainaction' => 'setDomainaction',
        'coupon' => 'setCoupon',
        'authid' => 'setAuthid',
        'autorenew' => 'setAutorenew'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'domain' => 'getDomain',
        'domainaction' => 'getDomainaction',
        'coupon' => 'getCoupon',
        'authid' => 'getAuthid',
        'autorenew' => 'getAutorenew'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const DOMAINACTION_REGISTER = 'register';
    public const DOMAINACTION_TRANSFER = 'transfer';
    public const DOMAINACTION_TRANSFERONLY = 'transferonly';
    public const DOMAINACTION_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getDomainactionAllowableValues()
    {
        return [
            self::DOMAINACTION_REGISTER,
            self::DOMAINACTION_TRANSFER,
            self::DOMAINACTION_TRANSFERONLY,
            self::DOMAINACTION_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('domainaction', $data ?? [], null);
        $this->setIfExists('coupon', $data ?? [], null);
        $this->setIfExists('authid', $data ?? [], null);
        $this->setIfExists('autorenew', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['domainaction'] === null) {
            $invalidProperties[] = "'domainaction' can't be null";
        }
        $allowedValues = self::getDomainactionAllowableValues();
        if (!is_null($this->container['domainaction']) && !in_array($this->container['domainaction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'domainaction', must be one of '%s'",
                $this->container['domainaction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain(): string
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain Fully qualified domain name (i.e example.com)
     *
     * @return $this
     */
    public function setDomain(string $domain): static
    {
        if (is_null($domain)) {
            throw new InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets domainaction
     *
     * @return string
     */
    public function getDomainaction(): string
    {
        return $this->container['domainaction'];
    }

    /**
     * Sets domainaction
     *
     * @param string $domainaction Action to perform on the domain
     *
     * @return $this
     */
    public function setDomainaction(string $domainaction): static
    {
        if (is_null($domainaction)) {
            throw new InvalidArgumentException('non-nullable domainaction cannot be null');
        }
        $allowedValues = self::getDomainactionAllowableValues();
        if (!in_array($domainaction, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'domainaction', must be one of '%s'",
                    $domainaction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['domainaction'] = $domainaction;

        return $this;
    }

    /**
     * Gets coupon
     *
     * @return string|null
     */
    public function getCoupon(): ?string
    {
        return $this->container['coupon'];
    }

    /**
     * Sets coupon
     *
     * @param string|null $coupon coupon
     *
     * @return $this
     */
    public function setCoupon(?string $coupon): static
    {
        if (is_null($coupon)) {
            throw new InvalidArgumentException('non-nullable coupon cannot be null');
        }
        $this->container['coupon'] = $coupon;

        return $this;
    }

    /**
     * Gets authid
     *
     * @return string|null
     */
    public function getAuthid(): ?string
    {
        return $this->container['authid'];
    }

    /**
     * Sets authid
     *
     * @param string|null $authid Authid for transfer, if applicable
     *
     * @return $this
     */
    public function setAuthid(?string $authid): static
    {
        if (is_null($authid)) {
            throw new InvalidArgumentException('non-nullable authid cannot be null');
        }
        $this->container['authid'] = $authid;

        return $this;
    }

    /**
     * Gets autorenew
     *
     * @return bool|null
     */
    public function getAutorenew(): ?bool
    {
        return $this->container['autorenew'];
    }

    /**
     * Sets autorenew
     *
     * @param bool|null $autorenew autorenew
     *
     * @return $this
     */
    public function setAutorenew(?bool $autorenew): static
    {
        if (is_null($autorenew)) {
            throw new InvalidArgumentException('non-nullable autorenew cannot be null');
        }
        $this->container['autorenew'] = $autorenew;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


