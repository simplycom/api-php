<?php
/**
 * DnsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  SimplySDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Simply.com API
 *
 * Documentation for this API can be found on https://www.simply.com/docs/api/
 *
 * The version of the OpenAPI document: 2.1.1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SimplySDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use SimplySDK\ApiException;
use SimplySDK\Configuration;
use SimplySDK\FormDataProcessor;
use SimplySDK\HeaderSelector;
use SimplySDK\ObjectSerializer;

/**
 * DnsApi Class Doc Comment
 *
 * @category Class
 * @package  SimplySDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DnsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addDnsRecord' => [
            'application/json',
        ],
        'ddnsHelper' => [
            'application/json',
        ],
        'deleteDnsRecord' => [
            'application/json',
        ],
        'dyndns' => [
            'application/json',
        ],
        'getDnsZone' => [
            'application/json',
        ],
        'reloadDnsZone' => [
            'application/json',
        ],
        'updateDnsRecord' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addDnsRecord
     *
     * Add new DNS record to a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDnsRecord'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SimplySDK\Model\AddDnsRecord200Response
     */
    public function addDnsRecord($object, $add_dns_record_request = null, string $contentType = self::contentTypes['addDnsRecord'][0])
    {
        list($response) = $this->addDnsRecordWithHttpInfo($object, $add_dns_record_request, $contentType);
        return $response;
    }

    /**
     * Operation addDnsRecordWithHttpInfo
     *
     * Add new DNS record to a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDnsRecord'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SimplySDK\Model\AddDnsRecord200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDnsRecordWithHttpInfo($object, $add_dns_record_request = null, string $contentType = self::contentTypes['addDnsRecord'][0])
    {
        $request = $this->addDnsRecordRequest($object, $add_dns_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SimplySDK\Model\AddDnsRecord200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SimplySDK\Model\AddDnsRecord200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SimplySDK\Model\AddDnsRecord200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addDnsRecordAsync
     *
     * Add new DNS record to a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDnsRecordAsync($object, $add_dns_record_request = null, string $contentType = self::contentTypes['addDnsRecord'][0])
    {
        return $this->addDnsRecordAsyncWithHttpInfo($object, $add_dns_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDnsRecordAsyncWithHttpInfo
     *
     * Add new DNS record to a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDnsRecordAsyncWithHttpInfo($object, $add_dns_record_request = null, string $contentType = self::contentTypes['addDnsRecord'][0])
    {
        $returnType = '\SimplySDK\Model\AddDnsRecord200Response';
        $request = $this->addDnsRecordRequest($object, $add_dns_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDnsRecord'
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDnsRecordRequest($object, $add_dns_record_request = null, string $contentType = self::contentTypes['addDnsRecord'][0])
    {

        // verify the required parameter 'object' is set
        if ($object === null || (is_array($object) && count($object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object when calling addDnsRecord'
            );
        }



        $resourcePath = '/my/products/{object}/dns/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($object !== null) {
            $resourcePath = str_replace(
                '{' . 'object' . '}',
                ObjectSerializer::toPathValue($object),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_dns_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_dns_record_request));
            } else {
                $httpBody = $add_dns_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation ddnsHelper
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $domain The domain you wish to update. Overrides data from hostname parameter. (optional)
     * @param  string|null $record The name of the generated DNS record you wish to create/update on the domain. Affects data from hostname parameter. (optional)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. We recommend leaving this parameter blank (optional)
     * @param  int|null $ttl The TTL of the generated DNS record (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ddnsHelper'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function ddnsHelper($hostname, $domain = null, $record = null, $myip = null, $ttl = null, string $contentType = self::contentTypes['ddnsHelper'][0])
    {
        $this->ddnsHelperWithHttpInfo($hostname, $domain, $record, $myip, $ttl, $contentType);
    }

    /**
     * Operation ddnsHelperWithHttpInfo
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $domain The domain you wish to update. Overrides data from hostname parameter. (optional)
     * @param  string|null $record The name of the generated DNS record you wish to create/update on the domain. Affects data from hostname parameter. (optional)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. We recommend leaving this parameter blank (optional)
     * @param  int|null $ttl The TTL of the generated DNS record (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ddnsHelper'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function ddnsHelperWithHttpInfo($hostname, $domain = null, $record = null, $myip = null, $ttl = null, string $contentType = self::contentTypes['ddnsHelper'][0])
    {
        $request = $this->ddnsHelperRequest($hostname, $domain, $record, $myip, $ttl, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation ddnsHelperAsync
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $domain The domain you wish to update. Overrides data from hostname parameter. (optional)
     * @param  string|null $record The name of the generated DNS record you wish to create/update on the domain. Affects data from hostname parameter. (optional)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. We recommend leaving this parameter blank (optional)
     * @param  int|null $ttl The TTL of the generated DNS record (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ddnsHelper'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ddnsHelperAsync($hostname, $domain = null, $record = null, $myip = null, $ttl = null, string $contentType = self::contentTypes['ddnsHelper'][0])
    {
        return $this->ddnsHelperAsyncWithHttpInfo($hostname, $domain, $record, $myip, $ttl, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation ddnsHelperAsyncWithHttpInfo
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $domain The domain you wish to update. Overrides data from hostname parameter. (optional)
     * @param  string|null $record The name of the generated DNS record you wish to create/update on the domain. Affects data from hostname parameter. (optional)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. We recommend leaving this parameter blank (optional)
     * @param  int|null $ttl The TTL of the generated DNS record (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ddnsHelper'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function ddnsHelperAsyncWithHttpInfo($hostname, $domain = null, $record = null, $myip = null, $ttl = null, string $contentType = self::contentTypes['ddnsHelper'][0])
    {
        $returnType = '';
        $request = $this->ddnsHelperRequest($hostname, $domain, $record, $myip, $ttl, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'ddnsHelper'
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $domain The domain you wish to update. Overrides data from hostname parameter. (optional)
     * @param  string|null $record The name of the generated DNS record you wish to create/update on the domain. Affects data from hostname parameter. (optional)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. We recommend leaving this parameter blank (optional)
     * @param  int|null $ttl The TTL of the generated DNS record (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['ddnsHelper'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function ddnsHelperRequest($hostname, $domain = null, $record = null, $myip = null, $ttl = null, string $contentType = self::contentTypes['ddnsHelper'][0])
    {

        // verify the required parameter 'hostname' is set
        if ($hostname === null || (is_array($hostname) && count($hostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hostname when calling ddnsHelper'
            );
        }






        $resourcePath = '/ddns/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain,
            'domain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hostname,
            'hostname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $record,
            'record', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $myip,
            'myip', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ttl,
            'ttl', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDnsRecord
     *
     * Removes DNS record from a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsRecord'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SimplySDK\Model\DeleteDnsRecord200Response
     */
    public function deleteDnsRecord($object, $record_id, string $contentType = self::contentTypes['deleteDnsRecord'][0])
    {
        list($response) = $this->deleteDnsRecordWithHttpInfo($object, $record_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteDnsRecordWithHttpInfo
     *
     * Removes DNS record from a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsRecord'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SimplySDK\Model\DeleteDnsRecord200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDnsRecordWithHttpInfo($object, $record_id, string $contentType = self::contentTypes['deleteDnsRecord'][0])
    {
        $request = $this->deleteDnsRecordRequest($object, $record_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\SimplySDK\Model\DeleteDnsRecord200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\SimplySDK\Model\DeleteDnsRecord200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SimplySDK\Model\DeleteDnsRecord200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteDnsRecordAsync
     *
     * Removes DNS record from a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnsRecordAsync($object, $record_id, string $contentType = self::contentTypes['deleteDnsRecord'][0])
    {
        return $this->deleteDnsRecordAsyncWithHttpInfo($object, $record_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDnsRecordAsyncWithHttpInfo
     *
     * Removes DNS record from a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDnsRecordAsyncWithHttpInfo($object, $record_id, string $contentType = self::contentTypes['deleteDnsRecord'][0])
    {
        $returnType = '\SimplySDK\Model\DeleteDnsRecord200Response';
        $request = $this->deleteDnsRecordRequest($object, $record_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDnsRecord'
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDnsRecordRequest($object, $record_id, string $contentType = self::contentTypes['deleteDnsRecord'][0])
    {

        // verify the required parameter 'object' is set
        if ($object === null || (is_array($object) && count($object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object when calling deleteDnsRecord'
            );
        }

        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling deleteDnsRecord'
            );
        }


        $resourcePath = '/my/products/{object}/dns/records/{record_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($object !== null) {
            $resourcePath = str_replace(
                '{' . 'object' . '}',
                ObjectSerializer::toPathValue($object),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'record_id' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dyndns
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. (optional)
     * @param  string|null $domain Domain to change records on, must be used if domain cannot be inferred from hostname or if incorrectly inferred. Overrides data from hostname parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dyndns'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function dyndns($hostname, $myip = null, $domain = null, string $contentType = self::contentTypes['dyndns'][0])
    {
        list($response) = $this->dyndnsWithHttpInfo($hostname, $myip, $domain, $contentType);
        return $response;
    }

    /**
     * Operation dyndnsWithHttpInfo
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. (optional)
     * @param  string|null $domain Domain to change records on, must be used if domain cannot be inferred from hostname or if incorrectly inferred. Overrides data from hostname parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dyndns'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function dyndnsWithHttpInfo($hostname, $myip = null, $domain = null, string $contentType = self::contentTypes['dyndns'][0])
    {
        $request = $this->dyndnsRequest($hostname, $myip, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation dyndnsAsync
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. (optional)
     * @param  string|null $domain Domain to change records on, must be used if domain cannot be inferred from hostname or if incorrectly inferred. Overrides data from hostname parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dyndns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dyndnsAsync($hostname, $myip = null, $domain = null, string $contentType = self::contentTypes['dyndns'][0])
    {
        return $this->dyndnsAsyncWithHttpInfo($hostname, $myip, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dyndnsAsyncWithHttpInfo
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. (optional)
     * @param  string|null $domain Domain to change records on, must be used if domain cannot be inferred from hostname or if incorrectly inferred. Overrides data from hostname parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dyndns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dyndnsAsyncWithHttpInfo($hostname, $myip = null, $domain = null, string $contentType = self::contentTypes['dyndns'][0])
    {
        $returnType = 'string';
        $request = $this->dyndnsRequest($hostname, $myip, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dyndns'
     *
     * @param  string $hostname The full hostname you wish to create/update. Domain and record will be inferred from this (required)
     * @param  string|null $myip The IP address to be set. Will automatically use the client IP (REMOTE_ADDR) if this parameter is not provided. (optional)
     * @param  string|null $domain Domain to change records on, must be used if domain cannot be inferred from hostname or if incorrectly inferred. Overrides data from hostname parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dyndns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dyndnsRequest($hostname, $myip = null, $domain = null, string $contentType = self::contentTypes['dyndns'][0])
    {

        // verify the required parameter 'hostname' is set
        if ($hostname === null || (is_array($hostname) && count($hostname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hostname when calling dyndns'
            );
        }




        $resourcePath = '/dyndns/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hostname,
            'hostname', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $myip,
            'myip', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain,
            'domain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDnsZone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getDnsZone($object, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        list($response) = $this->getDnsZoneWithHttpInfo($object, $contentType);
        return $response;
    }

    /**
     * Operation getDnsZoneWithHttpInfo
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDnsZoneWithHttpInfo($object, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        $request = $this->getDnsZoneRequest($object, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDnsZoneAsync
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZoneAsync($object, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        return $this->getDnsZoneAsyncWithHttpInfo($object, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDnsZoneAsyncWithHttpInfo
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDnsZoneAsyncWithHttpInfo($object, string $contentType = self::contentTypes['getDnsZone'][0])
    {
        $returnType = 'object';
        $request = $this->getDnsZoneRequest($object, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDnsZone'
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDnsZoneRequest($object, string $contentType = self::contentTypes['getDnsZone'][0])
    {

        // verify the required parameter 'object' is set
        if ($object === null || (is_array($object) && count($object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object when calling getDnsZone'
            );
        }


        $resourcePath = '/my/products/{object}/dns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($object !== null) {
            $resourcePath = str_replace(
                '{' . 'object' . '}',
                ObjectSerializer::toPathValue($object),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reloadDnsZone
     *
     * Force-reload a DNS zone - Usually not necessary
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reloadDnsZone'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function reloadDnsZone($object, string $contentType = self::contentTypes['reloadDnsZone'][0])
    {
        list($response) = $this->reloadDnsZoneWithHttpInfo($object, $contentType);
        return $response;
    }

    /**
     * Operation reloadDnsZoneWithHttpInfo
     *
     * Force-reload a DNS zone - Usually not necessary
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reloadDnsZone'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function reloadDnsZoneWithHttpInfo($object, string $contentType = self::contentTypes['reloadDnsZone'][0])
    {
        $request = $this->reloadDnsZoneRequest($object, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation reloadDnsZoneAsync
     *
     * Force-reload a DNS zone - Usually not necessary
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reloadDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reloadDnsZoneAsync($object, string $contentType = self::contentTypes['reloadDnsZone'][0])
    {
        return $this->reloadDnsZoneAsyncWithHttpInfo($object, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reloadDnsZoneAsyncWithHttpInfo
     *
     * Force-reload a DNS zone - Usually not necessary
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reloadDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reloadDnsZoneAsyncWithHttpInfo($object, string $contentType = self::contentTypes['reloadDnsZone'][0])
    {
        $returnType = 'object';
        $request = $this->reloadDnsZoneRequest($object, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reloadDnsZone'
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reloadDnsZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reloadDnsZoneRequest($object, string $contentType = self::contentTypes['reloadDnsZone'][0])
    {

        // verify the required parameter 'object' is set
        if ($object === null || (is_array($object) && count($object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object when calling reloadDnsZone'
            );
        }


        $resourcePath = '/my/products/{object}/dns/reload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($object !== null) {
            $resourcePath = str_replace(
                '{' . 'object' . '}',
                ObjectSerializer::toPathValue($object),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDnsRecord
     *
     * Updates a DNS record in a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsRecord'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateDnsRecord($object, $record_id, $add_dns_record_request = null, string $contentType = self::contentTypes['updateDnsRecord'][0])
    {
        list($response) = $this->updateDnsRecordWithHttpInfo($object, $record_id, $add_dns_record_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDnsRecordWithHttpInfo
     *
     * Updates a DNS record in a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsRecord'] to see the possible values for this operation
     *
     * @throws \SimplySDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDnsRecordWithHttpInfo($object, $record_id, $add_dns_record_request = null, string $contentType = self::contentTypes['updateDnsRecord'][0])
    {
        $request = $this->updateDnsRecordRequest($object, $record_id, $add_dns_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateDnsRecordAsync
     *
     * Updates a DNS record in a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDnsRecordAsync($object, $record_id, $add_dns_record_request = null, string $contentType = self::contentTypes['updateDnsRecord'][0])
    {
        return $this->updateDnsRecordAsyncWithHttpInfo($object, $record_id, $add_dns_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDnsRecordAsyncWithHttpInfo
     *
     * Updates a DNS record in a product DNS zone
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDnsRecordAsyncWithHttpInfo($object, $record_id, $add_dns_record_request = null, string $contentType = self::contentTypes['updateDnsRecord'][0])
    {
        $returnType = 'object';
        $request = $this->updateDnsRecordRequest($object, $record_id, $add_dns_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDnsRecord'
     *
     * @param  string $object The product handle/UUID, as found in the /my/products/ endpoint. (required)
     * @param  int $record_id The id of a DNS record in a DNS zone. (required)
     * @param  \SimplySDK\Model\AddDnsRecordRequest|null $add_dns_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDnsRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDnsRecordRequest($object, $record_id, $add_dns_record_request = null, string $contentType = self::contentTypes['updateDnsRecord'][0])
    {

        // verify the required parameter 'object' is set
        if ($object === null || (is_array($object) && count($object) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $object when calling updateDnsRecord'
            );
        }

        // verify the required parameter 'record_id' is set
        if ($record_id === null || (is_array($record_id) && count($record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling updateDnsRecord'
            );
        }



        $resourcePath = '/my/products/{object}/dns/records/{record_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($object !== null) {
            $resourcePath = str_replace(
                '{' . 'object' . '}',
                ObjectSerializer::toPathValue($object),
                $resourcePath
            );
        }
        // path params
        if ($record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'record_id' . '}',
                ObjectSerializer::toPathValue($record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_dns_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_dns_record_request));
            } else {
                $httpBody = $add_dns_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
